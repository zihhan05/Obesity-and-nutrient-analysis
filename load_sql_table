%%sql
### Create table according to Database Design
### Create tables to manage synonyms for "nutrient names" and "ages"

DROP TABLE IF EXISTS nutrient_names;
DROP SEQUENCE IF EXISTS seq_nutrient_names_id;
CREATE SEQUENCE seq_nutrient_names_id START 1;
CREATE TABLE nutrient_names (
    id INT PRIMARY KEY DEFAULT NEXTVAL('seq_nutrient_names_id'),
    name TEXT,
    nutrient_id INT
);

DROP TABLE IF EXISTS nutrients;
CREATE TABLE nutrients (
    id INT PRIMARY KEY,
    name TEXT
);

DROP TABLE IF EXISTS nutrient_in_ingredients;
DROP SEQUENCE IF EXISTS seq_nutrient_in_ingredients_id;
CREATE SEQUENCE seq_nutrient_in_ingredients_id START 1;
CREATE TABLE nutrient_in_ingredients (
    id INT PRIMARY KEY DEFAULT NEXTVAL('seq_nutrient_in_ingredients_id'),
    ingredient_id INT,
    nutrient_id INT,
    value DECIMAL
);

DROP TABLE IF EXISTS ingredients;
CREATE TABLE ingredients (
    id INT PRIMARY KEY,
    name TEXT
);

DROP TABLE IF EXISTS age_group_names;
DROP SEQUENCE IF EXISTS seq_age_group_names_id;
CREATE SEQUENCE seq_age_group_names_id START 1;
CREATE TABLE age_group_names (
    id INT PRIMARY KEY DEFAULT NEXTVAL('seq_age_group_names_id'),
    name TEXT,
    age_group_id INT
);

DROP TABLE IF EXISTS age_groups;
DROP SEQUENCE IF EXISTS seq_age_groups_id;
CREATE SEQUENCE seq_age_groups_id START 1;
CREATE TABLE age_groups (
    id INT PRIMARY KEY DEFAULT NEXTVAL('seq_age_groups_id'),
    name TEXT  
);

DROP TABLE IF EXISTS consumers;
DROP SEQUENCE IF EXISTS seq_consumers_id;
CREATE SEQUENCE seq_consumers_id START 1;
CREATE TABLE consumers (
    id INT PRIMARY KEY DEFAULT NEXTVAL('seq_consumers_id'),
    age_group_id INT,
    obesity_percentage DECIMAL
);

DROP TABLE IF EXISTS consumptions;
DROP SEQUENCE IF EXISTS seq_consumptions_id;
CREATE SEQUENCE seq_consumptions_id START 1;
CREATE TABLE consumptions (
    id INT PRIMARY KEY DEFAULT NEXTVAL('seq_consumptions_id'),
    amount DECIMAL,
    age_group_id INT,
    nutrient_id INT
);

### Load values into tables:(Example: "consumers' table)
import csv
import duckdb

with duckdb.connect('duckdb-file.db') as con:
    
    sql_insert_consumers = """
    INSERT INTO consumers(age_group_id, obesity_percentage) 
    VALUES ($age_group_id, $obesity_percentage)"""
    
    # Read age_group_names.csv and create a dictionary for quick lookup
    age_group_dict = {}
    with open('age_group_names.csv') as age_group_file:
        age_group_reader = csv.DictReader(age_group_file, delimiter=",", quotechar='"')
        for row in age_group_reader:
            age_group_dict[row['name']] = row['age_group_id']
            
    # Read obesity_ages.csv and insert data into consumers table
    with open('obesity_age_processed.csv') as obesity_file:
        obesity_reader = csv.DictReader(obesity_file, delimiter=",", quotechar='"')

        for row in obesity_reader:
            # Convert age to age_group_id using the dictionary
            new_age_group_name = row['age_group']
            if new_age_group_name in age_group_dict:
                age_group_id = age_group_dict[new_age_group_name]
                
                # Insert data into the consumers table
                param_dict = {'age_group_id': age_group_id,
                              'obesity_percentage': row['obesity_percentage']}
                con.execute(sql_insert_consumers, param_dict)
            else:
                print(f"No matching age_group_id found for {new_age_group_name}")

print("Successfully loaded the table consumers !")
